"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[422],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},s),{},{components:n})):r.createElement(y,i({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},i="Use JDBC to Connect MySQL in Native Android App",l={unversionedId:"web-app-development/Use JDBC to Connect Database in Native Android App",id:"web-app-development/Use JDBC to Connect Database in Native Android App",title:"Use JDBC to Connect MySQL in Native Android App",description:"I had a lot of trouble when developing native Android app with JDBC and this article will teach you how to connect to MySQL using JDBC successfully.",source:"@site/docs/web-app-development/Use JDBC to Connect Database in Native Android App.md",sourceDirName:"web-app-development",slug:"/web-app-development/Use JDBC to Connect Database in Native Android App",permalink:"/docs/web-app-development/Use JDBC to Connect Database in Native Android App",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web-app-development/Use JDBC to Connect Database in Native Android App.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Web/App Development",permalink:"/docs/category/webapp-development"},next:{title:"\u5a5a\u4fd7\u8bcd\u8bed\u6599\u5e93",permalink:"/docs/web-app-development/\u5a5a\u4fd7\u8bcd\u8bed\u6599\u5e93"}},p={},c=[{value:"Get Driver of JDBC",id:"get-driver-of-jdbc",level:2},{value:"Add Library",id:"add-library",level:2},{value:"Deploy MySQL5",id:"deploy-mysql5",level:2},{value:"Implement Connection Class",id:"implement-connection-class",level:2},{value:"Visit Database",id:"visit-database",level:2}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-jdbc-to-connect-mysql-in-native-android-app"},"Use JDBC to Connect MySQL in Native Android App"),(0,a.kt)("p",null,"I had a lot of trouble when developing native Android app with JDBC and this article will teach you how to connect to ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL")," using JDBC successfully."),(0,a.kt)("h2",{id:"get-driver-of-jdbc"},"Get Driver of JDBC"),(0,a.kt)("p",null,"In fact, all the steps are simple. All the trouble is caused by the incompatibility between ",(0,a.kt)("inlineCode",{parentName:"p"},"JDBC")," version and ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL")," version on the server. When you are developing native Android app, you can only use ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL Connector/J 5.1.x"),". Native Android is not compatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL Connector/J 8.0.x"),"."),(0,a.kt)("h2",{id:"add-library"},"Add Library"),(0,a.kt)("p",null,"After downloading the jar package of ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL Connector/J 5.1.x"),", you should put the jar package into your project and ",(0,a.kt)("inlineCode",{parentName:"p"},"Add to Library"),"."),(0,a.kt)("h2",{id:"deploy-mysql5"},"Deploy MySQL5"),(0,a.kt)("p",null,"Then, what you should do is configure ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL5")," on your server. Remember, don't use the latest version of ",(0,a.kt)("inlineCode",{parentName:"p"},"MySQL"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-mysql"},"docker pull mysql:5.x\n")),(0,a.kt)("p",null,"Then, you can refer to ",(0,a.kt)("a",{parentName:"p",href:"https://yufoo1.github.io/docs/web-app-development/Deploy%20Your%20Own%20Website%20and%20Database%20on%20the%20Server#deployment-of-mysql"},"Deployment of MySQL")," to finish the configuration."),(0,a.kt)("h2",{id:"implement-connection-class"},"Implement Connection Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.sql.*;\n\npublic class MysqlConnector {\n    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";\n    static final String DB_URL = "jdbc:mysql://SERVER IP ADDRESS:PORT/NAME OF PROJECT?characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";\n\n    static final String USERNAME = "USER";\n    static final String PASSWORD = "PASSWORD";\n    static Connection conn = null;\n    public static Connection getConnection() throws InterruptedException {\n        new Thread(() -> {\n            try {\n                Class.forName(JDBC_DRIVER);\n                try {\n                    conn = DriverManager.getConnection(DB_URL, USERNAME, PASSWORD);\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }).start();\n        Thread.sleep(1500);\n        return conn;\n    }\n}\n')),(0,a.kt)("h2",{id:"visit-database"},"Visit Database"),(0,a.kt)("p",null,"After written the connection class, you can query the database as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'ResultSet rs = null;\nnew Thread(() -> {\n           try {\n                Connection connection = MysqlConnector.getConnection();\n                String sql = "select * from NAME OF TABLE where id=?";\n                PreparedStatement ps = connection.prepareStatement(sql);\n                ps.setString(1, id); # necessary parameter\n                rs = ps.executeQuery(); # get the return result\n            } catch (InterruptedException | SQLException e) {\n                e.printStackTrace();\n            }\n        }).start();\n')),(0,a.kt)("p",null,"If you want to insert data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'new Thread(() -> {\n                try {\n                    Connection connection = MysqlConnector.getConnection();\n                    String sql = "INSERT INTO NAME OF TABLE(PARAMETER) VALUES(?)";\n                    PreparedStatement p = connection.prepareStatement(sql);\n                    p.setString(1, PARAMETER); # necessary parameter\n                    p.executeUpdate();\n                } catch (InterruptedException | SQLException e) {\n                    e.printStackTrace();\n                }\n            }).start();\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You must visit the database through child threads. If you use the main thread, you may not be able to connect. Meanwhile, you also need to be aware of possible concurrency issues.")))}d.isMDXComponent=!0}}]);